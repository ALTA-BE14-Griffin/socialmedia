openapi: 3.0.3
info:
  title: Social Media API
  description: |-
    API untuk social media project
  version: 1.0.0
servers:
  - url: htpps://socialmedia.com
    description: digunakan untuk ujicoba
tags:
  - name: users
  - name: posts
  - name: comments
paths:
  /users:
    post:
      tags:
        - "users"
      description: untuk melakukan registrasi user
      summary: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                hp:
                  type: string
                alamat:
                  type: string
                password:
                  type: string
            example:
              username: griffin
              email: griffinh29@gmail.com
              hp: "08123456"
              alamat: mks
      responses:
        201:
          description: "berhasil register user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "sukses menambahkan data"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "users"
      description: untuk mengedit data user
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - "username"
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                hp:
                  type: string
                alamat:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          $ref: '#/components/responses/200'
        404:
          $ref: '#/components/responses/404'
        400:
          $ref: '#/components/responses/400'
    delete:
      tags:
        - "users"
      security:
        - Bearer: []
      responses:
        200:
          description: berhasil hapus data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "sukses menghapus data"
        400:
          $ref: '#/components/responses/400'

  /login:
    post:
      tags:
        - users
      description: "untuk melakukan login"
      summary: login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: berhasil login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  username: griffin
                  email: griffinh29@gmail.com
                message: "sukses login"
        404:
          $ref: '#/components/responses/404'
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
        
  /posts:
    post:
      tags:
        - "posts"
      description: digunakan untuk post cerita, artkel, atau foto
      security:
        - Bearer: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text of the post.
                image:
                  type: string
                  format: binary
                  description: The binary data of the image file being uploaded.
              oneOf:
                - required:
                    - text
                - required:
                    - image
      responses:
        201:
          description: berhasil melakukan post
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                message: sukses menambahkan data
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - posts
      description: digunakan untuk melihat daftar post
      responses:
        200:
          description: "sukses melihat data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObjectArr'
              example:
                data:
                  - id: 1
                    post: "kemarin sore saya pergi mengunjungi taman di dekat rumah saya"
                  - id: 2
                    post: "https://berita.99.co/wp-content/uploads/2022/07/nature-mountain-scenery-background-free-vector.jpg"
                message: berhasil menampilkan data posting
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    
  /posts/{post_id}:
    put:
      tags:
        - "posts"
      description: digunakan untuk mengedit postingan
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text of the post.
                image:
                  type: string
                  format: binary
                  description: The binary data of the image file being uploaded.
              oneOf:
                - required:
                    - text
                - required:
                    - image
      responses:
        200:
          $ref: '#/components/responses/200'
        404:
          $ref: '#/components/responses/404'
        400:
          $ref: '#/components/responses/400'
    delete:
      tags:
        - "posts"
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - Bearer: []
      responses:
        200:
          description: berhasil hapus data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "sukses menghapus data"
        400:
          $ref: '#/components/responses/400'

  /comments:
    post:
      tags:
        - "comments"
      description: digunakan untuk melakukan komentar
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                post_id:
                  type: integer
                comment:
                  type: string
            example:
              id: 1
              comment: slay girl
      responses:
        201:
          description: berhasil posting komentar
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                message: sukses menambahkan data
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - comments
      description: digunakan untuk melihat daftar comment
      responses:
        200:
          description: "sukses melihat data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObjectArr'
              example:
                data:
                  - id: 1
                    comment: "slay girl"
                  - id: 2
                    comment: "gambarnya bagus"
                message: berhasil menampilkan data comment
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /comments/{comment_id}:
    delete:
      tags:
        - "comments"
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - Bearer: []
      responses:
        200:
          description: berhasil hapus data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "sukses menghapus data"
        400:
          $ref: '#/components/responses/400'

      
components:
  securitySchemes:
    Bearer:
      type: http
      bearerFormat: JWT
      scheme: bearer
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items: 
            type: object
        message:
          type: string
  responses:
    200:
      description: berhasil update data
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "sukses mengupdate data"
    404:
          description: "data tidak ditemukan"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "data tidak ditemukan"
    400:
      description: "Kesalahan dari user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "kesalahan input"
    500:
      description: "Kesalahan dari server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "data tidak bisa diolah"