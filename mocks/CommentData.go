// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	comments "socialmedia/features/comments"

	mock "github.com/stretchr/testify/mock"
)

// CommentData is an autogenerated mock type for the CommentData type
type CommentData struct {
	mock.Mock
}

// Add provides a mock function with given fields: postID, newPost
func (_m *CommentData) Add(postID int, newPost comments.Core) (comments.Core, error) {
	ret := _m.Called(postID, newPost)

	var r0 comments.Core
	if rf, ok := ret.Get(0).(func(int, comments.Core) comments.Core); ok {
		r0 = rf(postID, newPost)
	} else {
		r0 = ret.Get(0).(comments.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, comments.Core) error); ok {
		r1 = rf(postID, newPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: commentID, postID
func (_m *CommentData) Delete(commentID int, postID int) error {
	ret := _m.Called(commentID, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(commentID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: commentID, postID, updateData
func (_m *CommentData) Update(commentID int, postID int, updateData comments.Core) (comments.Core, error) {
	ret := _m.Called(commentID, postID, updateData)

	var r0 comments.Core
	if rf, ok := ret.Get(0).(func(int, int, comments.Core) comments.Core); ok {
		r0 = rf(commentID, postID, updateData)
	} else {
		r0 = ret.Get(0).(comments.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, comments.Core) error); ok {
		r1 = rf(commentID, postID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentData creates a new instance of CommentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentData(t mockConstructorTestingTNewCommentData) *CommentData {
	mock := &CommentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
