// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	posts "socialmedia/features/posts"

	mock "github.com/stretchr/testify/mock"
)

// PostData is an autogenerated mock type for the PostData type
type PostData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, newPost
func (_m *PostData) Add(userID int, newPost posts.Core) (posts.Core, error) {
	ret := _m.Called(userID, newPost)

	var r0 posts.Core
	if rf, ok := ret.Get(0).(func(int, posts.Core) posts.Core); ok {
		r0 = rf(userID, newPost)
	} else {
		r0 = ret.Get(0).(posts.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, posts.Core) error); ok {
		r1 = rf(userID, newPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: postID, userID
func (_m *PostData) Delete(postID int, userID int) error {
	ret := _m.Called(postID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields:
func (_m *PostData) GetPost() ([]posts.Core, error) {
	ret := _m.Called()

	var r0 []posts.Core
	if rf, ok := ret.Get(0).(func() []posts.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]posts.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostDetail provides a mock function with given fields: postID
func (_m *PostData) GetPostDetail(postID int) (interface{}, error) {
	ret := _m.Called(postID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: postID, userID, updateData
func (_m *PostData) Update(postID int, userID int, updateData posts.Core) (posts.Core, error) {
	ret := _m.Called(postID, userID, updateData)

	var r0 posts.Core
	if rf, ok := ret.Get(0).(func(int, int, posts.Core) posts.Core); ok {
		r0 = rf(postID, userID, updateData)
	} else {
		r0 = ret.Get(0).(posts.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, posts.Core) error); ok {
		r1 = rf(postID, userID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostData interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostData creates a new instance of PostData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostData(t mockConstructorTestingTNewPostData) *PostData {
	mock := &PostData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
